#place Idle12 mk(<..>)
#place WaitLeft12
#place HasLeft12
#place WaitRight12
#place HasRight12
#place Fork12 mk(<..>)
#place IsEating12
#place Idle13 mk(<..>)
#place WaitLeft13
#place HasLeft13
#place WaitRight13
#place HasRight13
#place Fork13 mk(<..>)
#place IsEating13
#place Idle14 mk(<..>)
#place WaitLeft14
#place HasLeft14
#place WaitRight14
#place HasRight14
#place Fork14 mk(<..>)
#place IsEating14
#trans GoEat12
in {Idle12:<..>;}
out {WaitLeft12:<..>;WaitRight12:<..>;}
#endtr
#trans GoLeft12
in {WaitLeft12:<..>;}
out {HasLeft12:<..>;}
#endtr
#trans GoRight12
in {Fork12:<..>;WaitRight12:<..>;}
out {HasRight12:<..>;}
#endtr
#trans Eat12
in {HasLeft12:<..>;HasRight12:<..>;}
out {IsEating12:<..>;}
#endtr
#trans Release12
in {IsEating12:<..>;}
out {Idle12:<..>;Fork12:<..>;}
#endtr
#trans GoEat13
in {Idle13:<..>;}
out {WaitLeft13:<..>;WaitRight13:<..>;}
#endtr
#trans GoLeft13
in {Fork12:<..>;WaitLeft13:<..>;}
out {HasLeft13:<..>;}
#endtr
#trans GoRight13
in {Fork13:<..>;WaitRight13:<..>;}
out {HasRight13:<..>;}
#endtr
#trans Eat13
in {HasLeft13:<..>;HasRight13:<..>;}
out {IsEating13:<..>;}
#endtr
#trans Release13
in {IsEating13:<..>;}
out {Idle13:<..>;Fork12:<..>;Fork13:<..>;}
#endtr
#trans GoEat14
in {Idle14:<..>;}
out {WaitLeft14:<..>;WaitRight14:<..>;}
#endtr
#trans GoLeft14
in {Fork13:<..>;WaitLeft14:<..>;}
out {HasLeft14:<..>;}
#endtr
#trans GoRight14
in {Fork14:<..>;WaitRight14:<..>;}
out {HasRight14:<..>;}
#endtr
#trans Eat14
in {HasLeft14:<..>;HasRight14:<..>;}
out {IsEating14:<..>;}
#endtr
#trans Release14
in {IsEating14:<..>;}
out {Idle14:<..>;Fork13:<..>;Fork14:<..>;}
#endtr
#trans GoLeft15
in {Fork14:<..>;}
out {}
#endtr
#trans Release15
in {}
out {Fork14:<..>;}
#endtr
