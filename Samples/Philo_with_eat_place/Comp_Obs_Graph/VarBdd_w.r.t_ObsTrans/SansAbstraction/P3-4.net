#place Idle2 mk(<..>)
#place WaitLeft2
#place HasLeft2
#place WaitRight2
#place HasRight2
#place Fork2 mk(<..>)
#place IsEating2
#place Idle3 mk(<..>)
#place WaitLeft3
#place HasLeft3
#place WaitRight3
#place HasRight3
#place Fork3 mk(<..>)
#place IsEating3
#trans GoLeft0
in {Fork3:<..>;}
out {}
#endtr
#trans Release0
in {}
out {Fork3:<..>;}
#endtr
#trans GoEat2
in {Idle2:<..>;}
out {WaitLeft2:<..>;WaitRight2:<..>;}
#endtr
#trans GoLeft2
in {WaitLeft2:<..>;}
out {HasLeft2:<..>;}
#endtr
#trans GoRight2
in {Fork2:<..>;WaitRight2:<..>;}
out {HasRight2:<..>;}
#endtr
#trans Eat2
in {HasLeft2:<..>;HasRight2:<..>;}
out {IsEating2:<..>;}
#endtr
#trans Release2
in {IsEating2:<..>;}
out {Idle2:<..>;Fork2:<..>;}
#endtr
#trans GoEat3
in {Idle3:<..>;}
out {WaitLeft3:<..>;WaitRight3:<..>;}
#endtr
#trans GoLeft3
in {Fork2:<..>;WaitLeft3:<..>;}
out {HasLeft3:<..>;}
#endtr
#trans GoRight3
in {Fork3:<..>;WaitRight3:<..>;}
out {HasRight3:<..>;}
#endtr
#trans Eat3
in {HasLeft3:<..>;HasRight3:<..>;}
out {IsEating3:<..>;}
#endtr
#trans Release3
in {IsEating3:<..>;}
out {Idle3:<..>;Fork2:<..>;Fork3:<..>;}
#endtr
